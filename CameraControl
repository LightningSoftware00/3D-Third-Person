using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraControl : MonoBehaviour
{
    public Transform player;  // Karakterin transformu
    public float rotationSpeed = 3f;  // Kamera dönüş hızı
    public float cameraDistance = 5f; // Kameranın karakterden uzaklığı
    public float cameraHeight = 2f;   // Kameranın yüksekliği
    public float minCameraDistance = 2f; // Kamera engelleme mesafesi
    public float maxCameraAngle = 80f; // Kamera açısı sınırı
    public float minCameraAngle = -40f; // Kamera açısı sınırı

    private void Update()
    {
        HandleCameraRotation();
        HandleCameraPosition();
    }

    // Kameranın karakteri takip etme ve dönüşü
    void HandleCameraRotation()
    {
        float mouseX = Input.GetAxis("Mouse X") * rotationSpeed;
        float mouseY = Input.GetAxis("Mouse Y") * rotationSpeed;

        // Kamerayı yatayda döndür
        transform.RotateAround(player.position, Vector3.up, mouseX);

        // Kamerayı dikeyde döndür (Limitsiz açılar için)
        float currentAngleX = transform.eulerAngles.x;
        currentAngleX -= mouseY;
        currentAngleX = Mathf.Clamp(currentAngleX, minCameraAngle, maxCameraAngle);
        transform.rotation = Quaternion.Euler(currentAngleX, transform.eulerAngles.y, 0f);
    }

    // Kameranın pozisyonunu ayarlamak
    void HandleCameraPosition()
    {
        Vector3 desiredPosition = player.position - transform.forward * cameraDistance + Vector3.up * cameraHeight;

        // Raycast kullanarak kameranın engellenmesini önleyelim
        RaycastHit hit;
        if (Physics.Raycast(player.position, -transform.forward, out hit, cameraDistance))
        {
            cameraDistance = Mathf.Max(minCameraDistance, hit.distance);  // Kamera objeyi geçemez
        }

        // Kamerayı hareket ettir
        transform.position = Vector3.Lerp(transform.position, desiredPosition, Time.deltaTime * 5f);
    }
}
