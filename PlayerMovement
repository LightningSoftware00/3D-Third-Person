using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    public float walkSpeed = 3f;  // Yürüyüş hızı
    public float runSpeed = 6f;   // Koşma hızı
    public float crouchSpeed = 3f; // Eğilme hızı
    public float crouchSlideSpeed = 8f;  // Sürüklenme hızı
    public float jumpForce = 5f;  // Zıplama kuvveti
    public float crouchHeight = 0.5f;  // Eğilme yüksekliği
    public float standHeight = 2f;     // Ayakta durma yüksekliği
    public float speedDecayFactor = 0.5f;  // Hız azalması oranı

    private float currentSpeed;    // Aktif hız
    private bool isPlayerGrounded;       // Karakterin yere temas edip etmediğini kontrol et
    private bool isCrouching = false;  // Eğilme durumu
    private bool isSliding = false;    // Sürüklenme durumu
    private Rigidbody rb;          // Rigidbody referansı
    private Animator animator;     // Animator referansı

    private void Start()
    {
        // Rigidbody ve Animator bileşenlerini alıyoruz
        rb = GetComponent<Rigidbody>();
        animator = GetComponent<Animator>();

        // Eğer Rigidbody ve Animator bileşenleri yoksa hata mesajı göster
        if (rb == null)
        {
            Debug.LogError("Rigidbody bileşeni eksik! Lütfen Rigidbody bileşenini ekleyin.");
        }

        if (animator == null)
        {
            Debug.LogError("Animator bileşeni eksik! Lütfen Animator bileşenini ekleyin.");
        }
    }

    private void Update()
    {
        HandleMovement();  // Hareket işlemi
        HandleJump();      // Zıplama işlemi
        HandleCrouch();    // Eğilme işlemi
    }

    // Karakterin hareketini işleyen fonksiyon
    void HandleMovement()
    {
        // Yatay ve dikey inputlar
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        // Hareket yönünü belirle
        Vector3 moveDirection = new Vector3(horizontal, 0f, vertical).normalized;

        // Hareket hızını koşma (Shift) ya da yürüyüş (Varsayılan) olarak belirle
        currentSpeed = Input.GetKey(KeyCode.LeftShift) ? runSpeed : walkSpeed;

        // Eğer hareket varsa, hareketi uygula
        if (moveDirection.magnitude >= 0.1f)
        {
            // Yönü hesapla
            float targetAngle = Mathf.Atan2(moveDirection.x, moveDirection.z) * Mathf.Rad2Deg;
            float angle = Mathf.SmoothDampAngle(transform.eulerAngles.y, targetAngle, ref currentSpeed, 0.1f);
            transform.rotation = Quaternion.Euler(0f, angle, 0f);

            // Karakteri hareket ettir
            Vector3 move = transform.forward * currentSpeed * Time.deltaTime;

            // Eğilme ve sürüklenme durumunda hareket
            if (isCrouching && isSliding)
            {
                transform.Translate(Vector3.forward * crouchSlideSpeed * Time.deltaTime);
            }
            else
            {
                rb.MovePosition(rb.position + move); // Rigidbody kullanarak hareket ettir
            }

            // Animasyonları tetikle (Speed parametresini animator'a gönder)
            animator.SetFloat("Speed", move.magnitude);
        }
    }

    // Zıplama işlemi
    void HandleJump()
    {
        if (isPlayerGrounded && Input.GetKeyDown(KeyCode.Space))  // Boşluk tuşuna basıldığında zıpla
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        }
    }

    // Eğilme işlemi
    void HandleCrouch()
    {
        if (Input.GetKeyDown(KeyCode.LeftControl) && !isCrouching)
        {
            StartCoroutine(CrouchStand());
        }
        else if (Input.GetKeyDown(KeyCode.LeftControl) && isCrouching)
        {
            StartCoroutine(StandUp());
        }
    }

    // Eğilme işlemi Coroutine
    IEnumerator CrouchStand()
    {
        isCrouching = true;
        isSliding = true;
        float timeElapsed = 0f;
        while (timeElapsed < crouchSpeed)
        {
            timeElapsed += Time.deltaTime;
            transform.localScale = new Vector3(1f, Mathf.Lerp(standHeight, crouchHeight, timeElapsed / crouchSpeed), 1f);
            yield return null;
        }
    }

    // Ayakta durma işlemi Coroutine
    IEnumerator StandUp()
    {
        isCrouching = false;
        isSliding = false;
        float timeElapsed = 0f;
        while (timeElapsed < crouchSpeed)
        {
            timeElapsed += Time.deltaTime;
            transform.localScale = new Vector3(1f, Mathf.Lerp(crouchHeight, standHeight, timeElapsed / crouchSpeed), 1f);
            yield return null;
        }
    }

    // Yere temas edip etmediğini kontrol et
    private void OnCollisionStay(Collision collision)
    {
        isPlayerGrounded = true;
    }

    private void OnCollisionExit(Collision collision)
    {
        isPlayerGrounded = false;
    }
}
